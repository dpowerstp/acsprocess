document()
library(devtools)
document()
R.version
document()
check()
use_mit_license()
install()
install.packages("installR")
install.packages("installr")
library(installr)
updateR()
check()
library(devtools)
check()
install()
use_r("acs_race_transform")
library(devtools)
use_r("acs_race_transform")
use_r("tp_load")
use_r("acs_load")
use_r("separate_label")
use_r("total_col_add")
use_r("derive_pct_moe")
use_r("race_pull")
create_package("leaflet_wrappers")
create_package("~/documents/r_proj/packages/leafletwrappers")
check()
use_package("dplyr")
use_package("tidycensus")
library(dplyr)
use_package("tidyverse")
use_package("tidyverse", type = "depends")
use_package("tidyr")
check()
library(devtools)
use_r("est_moe_derive")
install()
install()
check()
install()
library(devtools)
install()
c(c("cats"), list("cats" = "dogs"))
c(c("cats"), as.vector(list("cats" = "dogs")))
unlist(c(c("cats"), list("cats" = "dogs")))
total_col_add <- function(df,
total_cols,
join_col = "name",
join_type = "sequence",
est_col = "estimate") {
return_df <- df %>%
dplyr::rename_all(tolower)
total_cols_vec <- total_cols
total_cols_name <- names(total_cols)
# loop through list of total columns to pull
purrr::walk(seq_along(total_cols_vec), ~ {
select_tot_col <- total_cols_vec[[.x]]
select_cols_name <- total_cols_name[[.x]]
if (length(join_col) > 1 & length(total_cols) > 1){
# subset join columns
join_col <-join_col[1:.x]
}
# create name of moe for total
group_moe <- paste0(select_cols_name, "_moe")
# filter to total
total_df <- return_df %>%
dplyr::filter(is.na(!!sym(select_tot_col)))
# pull total value and moe for that (na value of subgroup column = total for that group
total_df <- total_df %>%
dplyr::mutate(!!sym(select_cols_name) := !!sym(est_col),
!!sym(group_moe) := moe)
# filter to total column and its moe as well as column to rejoin data by
total_df <- total_df %>%
dplyr::select(c(join_col, select_cols_name, group_moe))
# join total data to df and filter out total-row
return_df <<- return_df %>%
left_join(total_df) %>%
dplyr::filter(!is.na(!!sym(select_tot_col)))
})
group_vec <- c(join_col, unlist(total_cols, use.names = F), est_col)
df_check <- return_df %>%
dplyr::group_by(across(group_vec)) %>%
mutate(freq = n())
if (any(df_check %>% pull(freq) > 1)){
stop("Observations that are supposed to be unique repeat; check whether join columns and total columns align")
}
return(return_df)
}
library(devtools)
install()
install()
install()
install()
install()
install()
use_r("educ_recode")
use_r("income_recode")
gsub("(,000)|(,999)", "k", "100,000 to Less than $200,000") %>%
gsub("\\$", "", x = .) %>%
gsub(" to ", "-", x =  .) %>%
gsub("Less than ", "< ", x =  .) %>%
ifelse(string == "200k or more", "> 200k", .)
library(dplyr)
gsub("(,000)|(,999)", "k", "100,000 to Less than $200,000") %>%
gsub("\\$", "", x = .) %>%
gsub(" to ", "-", x =  .) %>%
gsub("Less than ", "< ", x =  .) %>%
ifelse(string == "200k or more", "> 200k", .)
gsub("(,000)|(,999)", "k", "100,000 to Less than $200,000") %>%
gsub("\\$", "", x = .) %>%
gsub(" to ", "-", x =  .) %>%
gsub("Less than ", "< ", x =  .) %>%
ifelse(. == "200k or more", "> 200k", .)
check()
install()
install()
library(devtools)
install()
library(devtools)
comp_recode <- function(df, comp_col, int_col, new_comp = "comp_int"){
comp_change <- function(string_comp, string_int){
comp_order <- c("Broadband internet",
"Dial-up internet",
"No internet",
"No computer")
comp_int <- ifelse(!grepl("No", string_comp), paste0(string_comp, " ", string_int), comp_order[4])
comp_int <- case_when(grepl("Without an Internet", comp_int) ~ comp_order[3],
grepl("dial-up", comp_int) ~ comp_order[2],
grepl("broadband", comp_int) ~ comp_order[1],
TRUE ~ comp_int)
return(comp_int)
}
return <- df %>%
mutate(!!sym(new_comp) := comp_change({{ comp_col }}, {{ int_col }}),
!!sym(new_comp) := factor(!!sym(new_comp), comp_order, comp_order))
if (any(is.na(return[[new_comp]]))){
stop("Error; missing values in return dataset")
}
return(return)
}
install()
install()
install()
library(devtools)
install()
check()
install()
install()
use_package("tidyverse")
use_package("tidyverse", type = "depends")
install()
install.packages("ellipsis")
library(devtools)
install()
install()
use_r("location_col")
install()
check()
install()
install()
check()
library(devtools)
check()
check()
check()
install()
library(devtools)
use_r("factor_functs")
grep("cats", c("dog"), value = T)
grep("cats", c("dog"), value = T) %>% length
length(grep("cats", c("dog"), value = T) )
health_vec <- c("Employer-based",
"Direct-purchase",
"Two or more",
"VA/military",
"Medicare",
"Medicaid/means-tested",
"Medicaid and Medicare",
"No insurance")
health_vec
check()
use_package("glue")
use_r("tpfuncts")
use_package("tpfuncts")
install()
install()
library(devtools)
install()
renv::init()
renv::init()
check()
library(devtools)
check()
devtools::check()
renv::snapshot()
renv::clean()
renv::snapshot()
install()
install.packages("devtools")
devtools::install()
use_r("process_functions")
library(devtools)
use_r("process_functions")
library(tidycensus)
use_data(variables)
usethis::use_data(variables)
variables <- tidycensus::load_variables(2019, "acs5", cache = TRUE)
usethis::use_data(variables)
variables_2019 <- tidycensus::load_variables(2019, "acs5", cache = TRUE)
usethis::use_data(variables_2019)
check()
library(devtools)
check()
library(devtools)
check()
use_package("magrittr")
check()
check()
install()
load_all()
16.33 + 6.67 + 2.33 + 10
source("~/r_proj/packages/acsprocess/R/process_functions.R", echo=TRUE)
source("~/r_proj/packages/acsprocess/R/process_functions.R", echo=TRUE)
check()
library(devtools)
check()
document()
devtools::document()
document()
devtools::document()
devtools::document()
